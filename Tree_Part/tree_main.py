from eckity.algorithms.simple_evolution import SimpleEvolution
from eckity.breeders.simple_breeder import SimpleBreeder
from eckity.genetic_operators.selections.tournament_selection import TournamentSelection
from eckity.statistics.best_average_worst_statistics import BestAverageWorstStatistics
from eckity.subpopulation import Subpopulation
from eckity.termination_checkers.threshold_from_target_termination_checker import ThresholdFromTargetTerminationChecker
from MsgSubtreeCrossover import MsgSubtreeCrossover
from MsgSubtreeMutation import MsgSubtreeMutation
from MsgTreeEvaluator import *
from MsgBinaryTreeCreator import MsgBinaryTreeCreator
from Others import Places

def run_tree_algo(places_matrix, couriers_num: int, max_distance, courier_delay):
    terminal_set = list(range(1, packages_num + 1))
    algo = SimpleEvolution(
        Subpopulation(creators=MsgBinaryTreeCreator(couriers_num=couriers_num,
                                                    terminal_set=terminal_set,
                                                    init_depth=None,
                                                    function_set=None),
                      population_size=100,

                      # user-defined fitness evaluation method
                      evaluator=MsgTreeEvaluator(places_matrix=places_matrix, max_distance=max_distance,
                                                 couriers_num=couriers_num, delay_for_courier=courier_delay),
                      # minimization problem (fitness is MAE), so higher fitness is worse
                      higher_is_better=False,
                      elitism_rate=0.5,
                      # genetic operators sequence to be applied in each generation
                      operators_sequence=[

                          MsgSubtreeCrossover(probability=0.8, arity=2),
                          MsgSubtreeMutation(probability=0.6, arity=1),
                      ],
                      selection_methods=[
                          # (selection method, selection probability) tuple
                          (TournamentSelection(tournament_size=4, higher_is_better=False), 1)
                      ]
                      ),
        breeder=SimpleBreeder(),
        max_workers=4,
        max_generation=300,
        # random_seed=0,
        termination_checker=ThresholdFromTargetTerminationChecker(optimal=0, threshold=0.001),
        statistics=BestAverageWorstStatistics()
    )

    # evolve the generated initial population
    algo.evolve()


packages_num = 30
max_distance = 30
terminal_set = list(range(1, packages_num+1))
couriers_num = 7
places_matrix = [[0., 24.84, 23.09, 23.35, 11.7, 23.32, 21.63, 30.46, 28.84, 19.21, 19.65, 22.8
, 19.21, 28.44, 30.07, 19.21, 34.71, 25., 41.01, 35., 19.8, 32.8, 24.76, 31.02
, 15.3, 22.02, 39.05, 25.32, 21.19, 31.83, 26.63]
, [24.84, 0., 9.49, 3.16, 15.81, 36.67, 37.22, 29.41, 8.54, 43.84, 43.42, 37.05
, 5.66, 22.85, 50.96, 31.78, 59.55, 14.42, 49.73, 41.76, 30.41, 8.06, 36.06, 45.71
, 34.89, 46.86, 42.45, 45.61, 26.31, 56.64, 34.53]
, [23.09, 9.49, 0., 11.66, 18.44, 28.79, 40.31, 19.92, 18.03, 40.5, 42.72, 40.61
, 8.6, 13.42, 52.24, 24.17, 56.6, 22.67, 55.54, 47.85, 22.47, 13.6, 40.52, 37.64
, 29.07, 44.29, 32.98, 47.1, 31.78, 53.54, 39.92]
, [23.35, 3.16, 11.66, 0., 13.42, 37.22, 34.37, 31.38, 7., 42.52, 41.34, 34.13
, 5.1, 25.06, 48.38, 32.25, 58., 11.4, 46.57, 38.6, 31.06, 10.44, 33.02, 46.27
, 34.54, 45.28, 44.27, 43.01, 23.19, 55.15, 31.4, ]
, [11.7, 15.81, 18.44, 13.42, 0., 32.02, 22.02, 33.24, 17.69, 30.53, 28.02, 22.2
, 11.05, 28.84, 35.17, 27.2, 45.34, 13.34, 37.59, 30.23, 26.93, 23.77, 22.14, 40.61
, 26.02, 32.65, 44.41, 29.83, 14.21, 42.64, 21.95]
, [23.32, 36.67, 28.79, 37.22, 32.02, 0., 43.86, 17.89, 44.18, 24.52, 34.44, 45.34
, 32.14, 21.93, 47.41, 5., 38.12, 44.28, 63.89, 58.25, 6.32, 42.38, 47.8, 9.06
, 10.3, 29.61, 18.68, 44.1, 44.28, 35.06, 49.93]
, [21.63, 37.22, 40.31, 34.37, 22.02, 43.86, 0., 51.88, 36.06, 27.66, 17.03, 2.
, 33., 49.04, 15.62, 40.36, 35.9, 27.73, 20.25, 16.28, 41.23, 44.72, 6.08, 50.22
, 34.21, 26.02, 60.61, 10.63, 13.6, 34.37, 10.44]
, [30.46, 29.41, 19.92, 31.38, 33.24, 17.89, 51.88, 0., 37.95, 40.11, 47.52, 52.84
, 27.29, 7., 59.67, 16.28, 55.11, 41.68, 70.21, 63.25, 14.14, 32.06, 54.08, 24.04
, 25.18, 45.04, 13.15, 55.36, 47.42, 51.97, 54.82]
, [28.84, 8.54, 18.03, 7., 17.69, 44.18, 36.06, 37.95, 0., 48.01, 45.45, 35.44
, 12.04, 31.38, 50.99, 39.2, 63.03, 9., 45.28, 37.22, 38.05, 10.77, 33.54, 53.24
, 41.11, 50.33, 50.96, 45.62, 23.35, 60.31, 31.06]
, [19.21, 43.84, 40.5, 42.52, 30.53, 24.52, 27.66, 40.11, 48.01, 0., 12.21, 29.61
, 38.18, 41.23, 24.76, 24., 16.12, 43.38, 47.17, 43.93, 26.02, 51.66, 33.38, 26.93
, 15., 5.1, 43.17, 23.02, 35.36, 13.04, 37.12]
, [19.65, 43.42, 42.72, 41.34, 28.02, 34.44, 17.03, 47.52, 45.45, 12.21, 0., 19.03
, 38.01, 47., 13.04, 32.57, 19.31, 38.95, 35.44, 33.06, 34.21, 51.48, 23.09, 38.42
, 24.17, 9.22, 52.92, 10.82, 27.73, 17.46, 27.29]
, [22.8, 37.05, 40.61, 34.13, 22.2, 45.34, 2., 52.84, 35.44, 29.61, 19.03, 0.
, 33.06, 49.77, 16.97, 41.73, 37.85, 26.93, 18.6, 14.32, 42.52, 44.41, 4.12, 51.87
, 35.81, 28.02, 61.85, 12.21, 12.53, 36.35, 8.54]
, [19.21, 5.66, 8.6, 5.1, 11.05, 32.14, 33., 27.29, 12.04, 38.18, 38.01, 33.06
, 0., 21.4, 46.1, 27.17, 53.91, 14.42, 47.17, 39.4, 26.02, 13.6, 32.56, 41.19
, 29.55, 41.23, 39.92, 40.79, 23.41, 50.99, 31.62]
, [28.44, 22.85, 13.42, 25.06, 28.84, 21.93, 49.04, 7., 31.38, 41.23, 47., 49.77
, 21.4, 0., 58.42, 18.87, 56.92, 35.81, 66.37, 59.08, 16.64, 25.08, 50.54, 29.41
, 26.93, 45.89, 20.1, 53.76, 43.01, 53.76, 50.77]
, [30.07, 50.96, 52.24, 48.38, 35.17, 47.41, 15.62, 59.67, 50.99, 24.76, 13.04, 16.97
, 46.1, 58.42, 0., 45.31, 25.32, 43.05, 27.02, 27.51, 46.82, 58.82, 20.62, 51.4
, 37.12, 20.62, 65.8, 5.39, 29.21, 25., 25., ]
, [19.21, 31.78, 24.17, 32.25, 27.2, 5., 40.36, 16.28, 39.2, 24., 32.57, 41.73
, 27.17, 18.87, 45.31, 0., 38.83, 39.32, 60.14, 54.2, 2.24, 37.7, 43.93, 14.04
, 9., 29.02, 20.59, 41.59, 39.82, 35.69, 45.8, ]
, [34.71, 59.55, 56.6, 58., 45.34, 38.12, 35.9, 55.11, 63.03, 16.12, 19.31, 37.85
, 53.91, 56.92, 25.32, 38.83, 0., 57.43, 52.09, 51.24, 41., 67.48, 41.98, 37.48
, 30.08, 12.73, 56.04, 27.02, 47.01, 3.16, 46.32]
, [25., 14.42, 22.67, 11.4, 13.34, 44.28, 27.73, 41.68, 9., 43.38, 38.95, 26.93
, 14.42, 35.81, 43.05, 39.32, 57.43, 0., 36.35, 28.28, 38.64, 19.42, 24.74, 53.15
, 39.2, 44.94, 54.13, 37.74, 14.56, 54.92, 22.09]
, [41.01, 49.73, 55.54, 46.57, 37.59, 63.89, 20.25, 70.21, 45.28, 47.17, 35.44, 18.6
, 47.17, 66.37, 27.02, 60.14, 52.09, 36.35, 0., 8.06, 60.81, 55.73, 16.28, 70.46
, 54.41, 44.64, 79.98, 25.32, 23.77, 51.35, 15.65]
, [35., 41.76, 47.85, 38.6, 30.23, 58.25, 16.28, 63.25, 37.22, 43.93, 33.06, 14.32
, 39.4, 59.08, 27.51, 54.2, 51.24, 28.28, 8.06, 0., 54.67, 47.68, 10.77, 65.37
, 49.24, 42.19, 73.55, 24.33, 16.12, 50.04, 8.49]
, [19.8, 30.41, 22.47, 31.06, 26.93, 6.32, 41.23, 14.14, 38.05, 26.02, 34.21, 42.52
, 26.02, 16.64, 46.82, 2.24, 41., 38.64, 60.81, 54.67, 0., 36.06, 44.55, 15.3
, 11.05, 31., 19.42, 42.95, 39.96, 37.85, 46.23]
, [32.8, 8.06, 13.6, 10.44, 23.77, 42.38, 44.72, 32.06, 10.77, 51.66, 51.48, 44.41
, 13.6, 25.08, 58.82, 37.7, 67.48, 19.42, 55.73, 47.68, 36.06, 0., 43.05, 51.24
, 41.88, 54.82, 45.18, 53.45, 33., 64.54, 41.05]
, [24.76, 36.06, 40.52, 33.02, 22.14, 47.8, 6.08, 54.08, 33.54, 33.38, 23.09, 4.12
, 32.56, 50.54, 20.62, 43.93, 41.98, 24.74, 16.28, 10.77, 44.55, 43.05, 0., 54.71
, 38.59, 32., 63.7, 16.12, 10.2, 40.45, 4.47]
, [31.02, 45.71, 37.64, 46.27, 40.61, 9.06, 50.22, 24.04, 53.24, 26.93, 38.42, 51.87
, 41.19, 29.41, 51.4, 14.04, 37.48, 53.15, 70.46, 65.37, 15.3, 51.24, 54.71, 0.
, 16.12, 31.76, 19.42, 48.84, 52.2, 34.71, 57.25]
, [15.3, 34.89, 29.07, 34.54, 26.02, 10.3, 34.21, 25.18, 41.11, 15., 24.17, 35.81
, 29.55, 26.93, 37.12, 9., 30.08, 39.2, 54.41, 49.24, 11.05, 41.88, 38.59, 16.12
, 0., 20.02, 28.79, 33.84, 36.4, 26.93, 41.15]
, [22.02, 46.86, 44.29, 45.28, 32.65, 29.61, 26.02, 45.04, 50.33, 5.1, 9.22, 28.02
, 41.23, 45.89, 20.62, 29.02, 12.73, 44.94, 44.64, 42.19, 31., 54.82, 32., 31.76
, 20.02, 0., 48.27, 19.7, 35.44, 10., 36.06]
, [39.05, 42.45, 32.98, 44.27, 44.41, 18.68, 60.61, 13.15, 50.96, 43.17, 52.92, 61.85
, 39.92, 20.1, 65.8, 20.59, 56.04, 54.13, 79.98, 73.55, 19.42, 45.18, 63.7, 19.42
, 28.79, 48.27, 0., 62.18, 58.26, 53.08, 65.07]
, [25.32, 45.61, 47.1, 43.01, 29.83, 44.1, 10.63, 55.36, 45.62, 23.02, 10.82, 12.21
, 40.79, 53.76, 5.39, 41.59, 27.02, 37.74, 25.32, 24.33, 42.95, 53.45, 16.12, 48.84
, 33.84, 19.7, 62.18, 0., 24.08, 26.08, 20.59]
, [21.19, 26.31, 31.78, 23.19, 14.21, 44.28, 13.6, 47.42, 23.35, 35.36, 27.73, 12.53
, 23.41, 43.01, 29.21, 39.82, 47.01, 14.56, 23.77, 16.12, 39.96, 33., 10.2, 52.2
, 36.4, 35.44, 58.26, 24.08, 0., 44.94, 8.25]
, [31.83, 56.64, 53.54, 55.15, 42.64, 35.06, 34.37, 51.97, 60.31, 13.04, 17.46, 36.35
, 50.99, 53.76, 25., 35.69, 3.16, 54.92, 51.35, 50.04, 37.85, 64.54, 40.45, 34.71
, 26.93, 10., 53.08, 26.08, 44.94, 0., 44.72]
, [26.63, 34.53, 39.92, 31.4, 21.95, 49.93, 10.44, 54.82, 31.06, 37.12, 27.29, 8.54
, 31.62, 50.77, 25., 45.8, 46.32, 22.09, 15.65, 8.49, 46.23, 41.05, 4.47, 57.25
, 41.15, 36.06, 65.07, 20.59, 8.25, 44.72, 0.]]
delay = 5
print(places_matrix)

run_tree_algo(places_matrix=places_matrix,couriers_num=couriers_num,max_distance=max_distance,courier_delay=delay)
















